import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import clientPromise from '../lib/mongodb'
import axios from 'axios'
import { ObjectID } from 'bson'

export default function Home({ isConnected, users }) {



  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        {users?.map((user, id) => {
          return (
            <div key={id}>
              <h3>{user.name}</h3>
            </div>
          )
        })}

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getServerSideProps(context) {
  try {
    await clientPromise
    // `await clientPromise` will use the default database passed in the MONGODB_URI
    // However you can use another database (e.g. myDatabase) by replacing the `await clientPromise` with the following code:
    //
    // const client = await clientPromise
    // const db = client.db("sample_analytics")
    //
    // Then you can execute queries against your database like so:
    // db.find({}) or any of the MongoDB Node Driver commands

    // "http://localhost:3000." NO PUEDE AGARRAR getServerSideProps una variable .env desde el local, porque corre en el servidor.
    const axiosInstance = axios.create({
      baseURL: process.env.BASE_URL
    })

    // operacion a realizar
    const opcion = "DELETE"


    /**
     * AXIOS por default tiene un apartado de "data". Luego ya puedes accesar a la estructura interna del objeto que se 
     * haya mandado desde la API.
     */

    if (opcion == "GET") {

      const users = await axiosInstance.get("/api/mongoReq")
      // console.log(users.data.users)
    }
    else if (opcion == "POST") {

      const uploadUser = await axiosInstance.post("/api/mongoReq", {
        // crea un único objeto _id para la DB
        _id: new ObjectID(),
        username: "jdelbarcogarza",
        name: "Jorge",
        address: "monterrey 123",
        birthdate: new Date('1995-12-17T03:24:00'),
        email: "hola@gmail",
        accounts: [200, 300],
        tier_and_details: {}

      }).then(function (response) {
        //console.log(response)
      }).catch(function (error) {
        //console.log(error)
      })

      // PUT es como un UPDATE
    } else if (opcion == "PUT") {
      const newVal = "JorgeNuevo"

      const updateUser = await axiosInstance.put("/api/mongoReq", {
        data: {
          filter: { name: "JorgeDefault" },
          updateDocument: {
            $set: { name: "JorgeCambio" }
          }
        }
      })

    } else if (opcion == "DELETE") {

      /** 
       * NOTA SOBRE DELETE CON AUTENTICACION
       * Al parecer debe de tener un token de autorizacion para borrar datos (pues es buena practica)
       * 
       * axios.delete(URL, {
            headers: {
              Authorization: authorizationToken
            },
            data: {
              source: source
            }
          });
       * 
       */


      /**
       *  El segundo parametro de un delete es el objeto de config. En este caso podemos poner data y esto será en la API de Starto el "request body"
       *  del request.
       */
      const deleteUser = await axiosInstance.delete("/api/mongoReq", { data: { 
        name: "JorgeCambio"
       }
      }).then(function (response) {
        //console.log(response)
      }).catch(function (error) {
        //console.log(error)
      })

    }



    return {
      props: { isConnected: true }
    }
  } catch (e) {
    console.error(e)
    return {
      props: { isConnected: false },
    }
  }
}